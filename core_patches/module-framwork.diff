--- Interception/Interceptor.php	2022-03-08 00:52:02.000000000 +0300
+++ Interception/Interceptor.php	2022-05-27 13:11:21.000000000 +0300
@@ -117,8 +117,17 @@
                 // Call 'before' listeners
                 foreach ($currentPluginInfo[DefinitionInterface::LISTENER_BEFORE] as $code) {
                     $pluginInstance = $pluginList->getPlugin($type, $code);
+                    $timeStart = microtime(true);
                     $pluginMethod = 'before' . $capMethod;
                     $beforeResult = $pluginInstance->$pluginMethod($this, ...array_values($arguments));
+                    $timeEnd = microtime(true);
+                    $pluginClass = get_class($pluginInstance);
+
+                    $pluginExecutionTime[DefinitionInterface::LISTENER_BEFORE][$pluginClass] = [
+                        $method => [$code => [$timeEnd - $timeStart]]
+                    ];
+                    $this->pluginList->setPluginExecutionTime($pluginExecutionTime);
+                    $this->pluginList->addInExecutedTypes($type);

                     if ($beforeResult !== null) {
                         $arguments = (array)$beforeResult;
@@ -132,7 +141,15 @@
                 $pluginInfo = $pluginList->getNext($type, $method, $code);
                 $pluginInstance = $pluginList->getPlugin($type, $code);
                 $pluginMethod = 'around' . $capMethod;
+                $timeStart = microtime(true);
                 $result = $pluginInstance->$pluginMethod($subject, $next, ...array_values($arguments));
+                $timeEnd = microtime(true);
+                $pluginClass = get_class($pluginInstance);
+                $pluginExecutionTime[DefinitionInterface::LISTENER_AROUND][$pluginClass] = [
+                    $method => [$code => [$timeEnd - $timeStart]]
+                ];
+                $this->pluginList->setPluginExecutionTime($pluginExecutionTime);
+                $this->pluginList->addInExecutedTypes($type);
             } else {
                 // Call original method
                 $result = $subject->___callParent($method, $arguments);
@@ -143,7 +160,15 @@
                 foreach ($currentPluginInfo[DefinitionInterface::LISTENER_AFTER] as $code) {
                     $pluginInstance = $pluginList->getPlugin($type, $code);
                     $pluginMethod = 'after' . $capMethod;
+                    $timeStart = microtime(true);
                     $result = $pluginInstance->$pluginMethod($subject, $result, ...array_values($arguments));
+                    $timeEnd = microtime(true);
+                    $pluginClass = get_class($pluginInstance);
+                    $pluginExecutionTime[DefinitionInterface::LISTENER_AFTER][$pluginClass] = [
+                        $method => [$code => [$timeEnd - $timeStart]]
+                    ];
+                    $this->pluginList->setPluginExecutionTime($pluginExecutionTime);
+                    $this->pluginList->addInExecutedTypes($type);
                 }
             }

--- Interception/PluginList/PluginList.php	2022-03-08 00:52:02.000000000 +0300
+++ Interception/PluginList/PluginList.php	2022-05-27 13:11:21.000000000 +0300
@@ -92,6 +92,10 @@
      */
     private $pluginListGenerator;

+    private $execution = [];
+
+    private $executedTypes = [];
+
     /**
      * Constructor
      *
@@ -138,6 +142,26 @@
     }

     /**
+     * @param array $data
+     * @return void
+     */
+    public function setPluginExecutionTime(array $data)
+    {
+        $definition = array_key_first($data);
+
+        if (empty($this->execution)) {
+            $this->execution = [
+                DefinitionInterface::LISTENER_BEFORE => [],
+                DefinitionInterface::LISTENER_AROUND => [],
+                DefinitionInterface::LISTENER_AFTER => [],
+            ];
+        }
+
+
+        $this->execution[$definition] = array_merge_recursive($this->execution[$definition], $data[$definition]);
+    }
+
+    /**
      * Collect parent types configuration for requested type
      *
      * @param string $type
@@ -292,4 +316,9 @@
     {
         $this->_data = $this->pluginListGenerator->merge($config, $this->_data);
     }
+
+    public function addInExecutedTypes($typeClass)
+    {
+        $this->executedTypes[] = $typeClass;
+    }
 }
